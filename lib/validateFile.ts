import { z } from "zod";

// Zod —Å—Ö–µ–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
export const fileValidationSchema = z.object({
  isValid: z.boolean(),
  error: z.string().optional(),
  file: z.instanceof(File).optional(),
});

export const fileTypeConfigSchema = z.object({
  accept: z.string(),
  maxSize: z.number(), // –≤ –±–∞–π—Ç–∞—Ö
  extensions: z.array(z.string()),
  maxFiles: z.number().optional(), // –¥–ª—è multi-file –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
});

export const fileTypesSchema = z.object({
  resume: fileTypeConfigSchema,
  coverLetter: fileTypeConfigSchema,
  education: fileTypeConfigSchema,
  linkedinArchive: fileTypeConfigSchema,
  profilePhoto: fileTypeConfigSchema,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
export const FILE_TYPES: Record<string, FileTypeConfig> = {
  resume: {
    accept: '.pdf,.doc,.docx,.txt',
    maxSize: 5 * 1024 * 1024, // 5 –ú–ë
    extensions: ['.pdf', '.doc', '.docx', '.txt'],
    maxFiles: 1
  },
  coverLetter: {
    accept: '.pdf,.doc,.docx,.txt',
    maxSize: 5 * 1024 * 1024, // 5 –ú–ë
    extensions: ['.pdf', '.doc', '.docx', '.txt'],
    maxFiles: 1
  },
  education: {
    accept: '.pdf,.jpg,.jpeg,.png',
    maxSize: 10 * 1024 * 1024, // 10 –ú–ë –∑–∞ —Ñ–∞–π–ª
    extensions: ['.pdf', '.jpg', '.jpeg', '.png'],
    maxFiles: 15
  },
  linkedinArchive: {
    accept: '.zip,.pdf',
    maxSize: 20 * 1024 * 1024, // 20 –ú–ë
    extensions: ['.zip', '.pdf'],
    maxFiles: 1
  },
  profilePhoto: {
    accept: '.jpg,.jpeg,.png,.gif',
    maxSize: 5 * 1024 * 1024, // 5 –ú–ë
    extensions: ['.jpg', '.jpeg', '.png', '.gif'],
    maxFiles: 1
  }
};

// –¢–∏–ø—ã, –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–∑ Zod —Å—Ö–µ–º
export type FileValidationResult = z.infer<typeof fileValidationSchema>;
export type FileTypeConfig = z.infer<typeof fileTypeConfigSchema>;
export type FileTypes = z.infer<typeof fileTypesSchema>;

// –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LinkedIn URL
export const linkedInUrlSchema = z.string()
  .min(1, "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
  .regex(/^https:\/\/linkedin\.com\/in\/[a-zA-Z0-9-]+\/?$/, 
    "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://linkedin.com/in/ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å");

export function validateFile(file: File, type: keyof typeof FILE_TYPES): FileValidationResult {
  const config = FILE_TYPES[type];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
  if (file.size > config.maxSize) {
    return {
      isValid: false,
      error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${config.maxSize / (1024 * 1024)} –ú–ë`
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
  if (fileExtension && !config.extensions.includes(fileExtension)) {
    return {
      isValid: false,
      error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${config.extensions.join(', ')}`
    };
  }
  
  return {
    isValid: true,
    file
  };
}

export function validateLinkedInUrl(url: string): FileValidationResult {
  try {
    linkedInUrlSchema.parse(url);
    return {
      isValid: true
    };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        isValid: false,
        error: error.errors[0].message
      };
    }
    return {
      isValid: false,
      error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    };
  }
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 –ë';
  
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

export function getFileIcon(fileName: string): string {
  const extension = fileName.split('.').pop()?.toLowerCase();
  
  switch (extension) {
    case 'pdf':
      return 'üìÑ';
    case 'doc':
    case 'docx':
      return 'üìù';
    case 'txt':
      return 'üìÑ';
    case 'zip':
      return 'üì¶';
    case 'jpg':
    case 'jpeg':
    case 'png':
    case 'gif':
      return 'üñºÔ∏è';
    default:
      return 'üìÅ';
  }
} 